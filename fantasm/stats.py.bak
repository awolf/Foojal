
import datetime
from google.appengine.ext import db
from fantasm import constants

STATS_COMPILATION_MACHINE = 'FantasmStatsCompilation'
STATS_FAN_IN_PERIOD = 30 # seconds

# STATS_MACHINES = """
# 
# - name: FantasmStatsCompilation
#   namespace: fantasm.stats
#   context_types:
#     date: datetime
#   states:
# 
#   - name: LogStatPoint
#     initial: True
#     action: LogStatPoint
#     transitions:
#     - event: compile
#       to: CompileStats
# 
#   - name: CompileStats
#     final: True
#     fan_in: 30
#     action: CompileStats
# 
# """

def addMachines(configDict):
    """ Adds internal-use machines. """
    
    # logStatState = {
    #     constants.STATE_NAME_ATTRIBUTE: 'LogStatPoint',
    #     constants.STATE_ACTION_ATTRIBUTE: 'LogStatPoint',
    #     constants.STATE_INITIAL_ATTRIBUTE: True,
    #     constants.STATE_TRANSITIONS_ATTRIBUTE = [
    #         {
    #             constants.TRANSITION_EVENT_ATTRIBUTE: 'compile',
    #             constants.TRANSITION_TO_ATTRIBUTE: 'CompileStats'
    #         }
    #     ]
    # }
    
    compileStatsState = {
        constants.STATE_NAME_ATTRIBUTE: 'CompileStats',
        constants.STATE_ACTION_ATTRIBUTE: 'CompileStats',
        constants.STATE_INITIAL_ATTRIBUTE: True,
        constants.STATE_FINAL_ATTRIBUTE: True,
        constants.STATE_FAN_IN_ATTRIBUTE: STATS_FAN_IN_PERIOD
    }
    
    statsCompMachine = {
        constants.MACHINE_NAME_ATTRIBUTE: 'FantasmStatsCompilation',
        constants.NAMESPACE_ATTRIBUTE: 'fantasm.stats',
        constants.MACHINE_CONTEXT_TYPES_ATTRIBUTE: {
            'date': 'datetime'
        },
        constants.MACHINE_STATES_ATTRIBUTE: [
            #logStatState, 
            compileStatsState
        ]
    }
    
    if not 'state_machines' in configDict:
        configDict['state_machines'] = []
    configDict['state_machines'].append(statsCompMachine)

# class LogStatPoint(object):
#     
#     def execute(self, context, obj):
#         # TODO - remove this state
#         return 'compile'
        
class CompileStats(object):
    
    def execute(self, contexts, obj):
        
        # combine stats by machineName/date
        invocations = defaultdict(int)
        normalFinish = defaultdict(int)
        abnormalFinish = defaultdict(int)
        
        for context in contexts:
            date = context['date'].date()
            key = (context['machineName'], date)
            invocations[key] += 1
            if context['finish'] == 'normal':
                normalFinish[key] += 1
            else:
                abnormalFinish[key] += 1
            
        def tx(machineName, date, invocationCount, normalFinishCount, abnormalFinishCount):
            key_name = '%s:%s' % (machineName, date)
            record = _FantasmStats.get_by_key_name(key)
            if not record:
                record = _FantasmStats(key_name=key_name, machineName=machineName, date=date)
            record.invocations += invocationCount
            record.normalFinishes += normalFinishCount
            record.abnormalFinished += abnormalFinishCount
            record.put()
            
        for key in invocations:
            (machineName, date) = key
            invocationCount = invocations[key]
            normalFinishCount = normalFinish.get(key, 0)
            abnormalFinishCount = abnormalFinish.get(key, 0)
            db.run_in_transaction(tx, machineName, date, invocationCount, normalFinishCount, abnormalFinishCount)

class _FantasmStats(db.Model):
    
    machineName = db.StringProperty(required=True)
    date = db.DateProperty(required=True)
    invocations = db.IntegerProperty(default=0, indexed=False)
    normalFinishes = db.IntegerProperty(default=0, indexed=False)
    abnormalFinishes = db.IntegerProperty(default=0, indexed=False)

def logNormalFinish(fsmContext):
    context = {
        'machineName': fsmContext.machineName,
        'finish': 'normal',
        'date': datetime.datetime.utcnow()
    }
    from fantasm.fsm import spawn
    spawn(STATS_COMPILATION_MACHINE, context)
    
def logAbnormalFinish(fsmContext):
    context = {
        'machineName': fsmContext.machineName,
        'finish': 'abnormal',
        'date': datetime.datetime.utcnow()
    }
    from fantasm.fsm import spawn
    spawn(STATS_COMPILATION_MACHINE, context)
