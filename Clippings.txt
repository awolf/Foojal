retValStr = []
		for i in retVal:
			retValStr.append(i.__str__())
		date = retValStr[1]
		date = date.split(" ")
		time = date[1]
		date = date[0]
		year = date.split(":")[0]
		month = int(date.split(":")[1])
		day = date.split(":")[2]
		hr = int(time.split(":")[0])
		min = time.split(":")[1]
		am_pm = "AM"
		if hr >= 12:
			am_pm = "PM"
		if hr > 12:
			hr = hr - 12
		hr = str(hr)
		monthArr = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
		date = monthArr[month - 1] + " " + day + ", " + year
		time = hr + ":" + min + " " + am_



		"""
                    # #################
                    # GPSLongitude
                    # Indicates the longitude.
                    # The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively.
                    # #################
                    try:
                        GPSLongitude = tags['GPS GPSLongitude'] # returns an <'instance'> object

                        GPSLongitude  = GPSLongitude.values
                        GPSLongitudeD = GPSLongitude[0]
                        GPSLongitudeD = str(GPSLongitudeD)
                        GPSLongitudeD = int(GPSLongitudeD)
                        logging.info('GPSLongitudeD:\t\t' +str(GPSLongitudeD))

                        GPSLongitudeM = GPSLongitude[1]
                        GPSLongitudeM = str(GPSLongitudeM)
                        GPSLongitudeM = int(GPSLongitudeM)
                        logging.info('GPSLongitudeM:\t\t' +str(GPSLongitudeM))

                        GPSLongitudeS = GPSLongitude[2]
                        GPSLongitudeS = str(GPSLongitudeS)
                        try:

                            GPSLongitudeS = GPSLongitudeS.split("/") #string.split(GPSLongitudeS, "/")
                            GPSLongitudeSDividend = GPSLongitudeS[0]
                            GPSLongitudeSDividend = float(GPSLongitudeSDividend)
                            GPSLongitudeSDivisor  = GPSLongitudeS[1]
                            GPSLongitudeSDivisor  = float(GPSLongitudeSDivisor)
                            GPSLongitudeDecimalS = GPSLongitudeSDividend / GPSLongitudeSDivisor
                            GPSLongitudeDD = GPSLongitudeD + (GPSLongitudeM/60.0) + (GPSLongitudeDecimalS/3600.0)
                            logging.info('GPSLongitudeDecimalS:\t' + str(GPSLongitudeDecimalS))
                        except Exception, err:
                            logging.error("Error fetching longitude " + str(err))
                            GPSLongitudeDecimalS = float(GPSLongitudeS[0])
                            GPSLongitudeDD = GPSLongitudeD + (GPSLongitudeM/60.0) + (GPSLongitudeDecimalS/3600.0)
                        else:
                            pass
                    except Exception, err:
                        logging.error("Error fetching longitude " + str(err))
                        GPSLongitudeDD = 0.0

                    # #################
                    # GPSLatitude
                    # Indicates the latitude.
                    # The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively.
                    # #################
                    try:
                        GPSLatitude = tags['GPS GPSLatitude']

                        GPSLatitude  = GPSLatitude.values
                        GPSLatitudeD = GPSLatitude[0]
                        GPSLatitudeD = str(GPSLatitudeD)
                        GPSLatitudeD = int(GPSLatitudeD)
                        logging.info('GPSLatitude:\t\t' + str(GPSLatitudeD))

                        GPSLatitudeM = GPSLatitude[1]
                        GPSLatitudeM = str(GPSLatitudeM)
                        GPSLatitudeM = int(GPSLatitudeM)
                        logging.info('GPSLatitudeM:\t\t' +str(GPSLatitudeM))

                        GPSLatitudeS = GPSLatitude[2]
                        GPSLatitudeS = str(GPSLatitudeS)
                        try:
                            GPSLatitudeS = string.split(GPSLatitudeS, "/")
                            GPSLatitudeSDividend = GPSLatitudeS[0]
                            GPSLatitudeSDividend = float(GPSLatitudeSDividend)
                            GPSLatitudeSDivisor  = GPSLatitudeS[1]
                            GPSLatitudeSDivisor  = float(GPSLatitudeSDivisor)
                            GPSLatitudeDecimalS  = GPSLatitudeSDividend / GPSLatitudeSDivisor
                            logging.info('GPSLatitudeDecimalS:\t' + str(GPSLatitudeDecimalS))
                        except Exception, err:
                            logging.error("Error fetching latitude " + str(err))
                            GPSLatitudeDecimalS = float(GPSLatitudeS[0])
                            GPSLatitudeDD = GPSLatitudeD + (GPSLatitudeM/60.0) + (GPSLatitudeDecimalS/3600.0)
                        else:
                            pass

                        GPSLatitudeDD = GPSLatitudeD + (GPSLatitudeM/60.0) + (GPSLatitudeDecimalS/3600.0)
                    except Exception, err:
                        logging.error("Error fetching latitude " + str(err))
                        GPSLatitudeDD = 0.0

                    event.location = db.GeoPt(GPSLatitudeDD,GPSLongitudeDD)
                    """


dic = {'jack': 4098, 'sape': 4139}
message.exif_blob = pickle.dumps(dic)

dic = pickle.loads(message.exif_blob)

logging.info(dic['sape'])


        logging.info("Received a message from: " + mail_message.sender)
        sender = mail_message.sender
        account = models.Account.get_account_by_email(sender)

        account_id = None

        if account:
            account_id = account.key().id()
            if account.is_expired:
                logging.info("Receiving email from " + mail_message.sender + " an expired account that is verified = " + str(account.is_verified))
                return
        else:
            # TODO: This we can push to the task queues.
            models.Invitation.send_invitation(sender)

        message = models.Message()
        message.account_key = account_id
        message.sender = sender
        message.to = mail_message.to
        if hasattr(mail_message, 'subject'):
            message.subject = mail_message.subject

        # Get the body text out of the email
        plaintext_bodies = mail_message.bodies('text/plain')
        body_text = ""
        for content_type, body in plaintext_bodies:
            body_text = body_text + body.decode() + " "
        message.body = str(body_text)


        #dic = {'jack': 4098, 'sape': 4139}
        #message.exif_blob = pickle.dumps(dic)
        #dic = pickle.loads(message.exif_blob)
        #logging.info(dic['sape'])


        try:
            orientation = None
            image_data = None
            if hasattr(mail_message,'attachments'):
                attachments = mail_message.attachments
                logging.info("We have attachments in this email: ")

                try:
                    # todo: Adam How about we check that the first attachment is a photo!
                    # Get the image data from the first attachment
                    image_data = goodDecode(attachments[0][1])

                    #logged the size of the incoming image
                    logging.info("attachment length " + str(len(image_data)))

                    # get some exif love from the first attachments
                    tags = EXIF.process_file(StringIO(str(image_data)))
                    logging.info("start decoding exif tags ")

                    orientation = str(tags["Image Orientation"])

                    latitude = str(tags['GPS GPSLatitude'])
                    latitudeReference = str(tags['GPS GPSLatitudeRef'])
                    latitudeCoordinate = models.GetGeoPt(tags['GPS GPSLatitude'],latitudeReference)
                    logging.info("GPS Latitude results" + str(latitudeCoordinate))

                    longitude = str(tags['GPS GPSLongitude'])
                    longitudeReference = str(tags['GPS GPSLongitudeRef'])
                    longitudeCoordinate = models.GetGeoPt(tags['GPS GPSLongitude'],longitudeReference)
                    logging.info("GPS Longitude results " + str(longitudeCoordinate))

                    message.latitude = latitude
                    message.latitudeReference = latitudeReference
                    message.longitude = longitude
                    message.longitudeReference = longitudeReference
                    message.location = db.GeoPt(latitudeCoordinate, longitudeCoordinate)

                    tagText = ""
                    for key, value in tags.items():
                        tagText = tagText + " " + str(key) + " := " + str(value)
                    message.exif_text = tagText

                    logging.info("end decoding exif tags ")
                except Exception, err:
                    logging.error("Error fetching tags " + str(err))

                img = images.Image(image_data)
                img.resize(width=600,height=600)

                if orientation == "Rotated 90 CW":
                    img.rotate(90)
                    logging.info("image rotated 90%")
                elif orientation == "Rotated 180":
                    img.rotate(180)
                    logging.info("image rotated 180%")
                elif orientation == "Rotated 90 CCW":
                    img.rotate(270)
                    logging.info("image rotated 260%")

                #img.im_feeling_lucky()
                thumbnail = img.execute_transforms(output_encoding=images.JPEG)

                logging.info("Thumbnail created: ")

                message.thumbnail = db.Blob(thumbnail)
                message.picture_name = attachments[0][0]
        except Exception, err:
            logging.error("Error working with attachments " + str(err))

        message.put()