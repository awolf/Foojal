







def GetGeoPt(coordinate, GPSReference):
    try:
        logging.info(str(coordinate))
        #coordinate  = coordinate.values
        GPSHour = coordinate[0]
        GPSHour = str(GPSHour)
        GPSHour = int(GPSHour)
        logging.info('GPSHour: ' + str(GPSHour))

        GPSSeconds = coordinate[2]
        GPSSeconds = str(GPSSeconds)
        GPSSeconds = int(GPSSeconds)
        logging.info('GPSSeconds: ' +str(GPSSeconds))

        GPSMinute = coordinate[1]
        GPSMinute = str(GPSMinute)
        try:
            GPSMinute = string.split(GPSMinute, "/")
            GPSMinuteDividend = GPSMinute[0]
            GPSMinuteDividend = float(GPSMinuteDividend)
            GPSMinuteDivisor  = GPSMinute[1]
            GPSMinuteDivisor  = float(GPSMinuteDivisor)
            GPSMinute  = GPSMinuteDividend / GPSMinuteDivisor
            logging.info('GPS Minute: ' + str(GPSMinute))
        except Exception, err:
            logging.error("Error fetching GPS coordinate " + str(err))
        else:
            pass

        GPS_Coordinate = GPSHour + (GPSMinute/60.0) + (GPSSeconds/3600.0)
    except Exception, err:
        logging.error("Error fetching " + str(err))
        GPS_Coordinate = 0.0

    if  GPSReference == "W" or GPSReference == "S":
        GPS_Coordinate = GPS_Coordinate * -1.0

    return GPS_Coordinate



















>>> string.punctuation
>>> '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'



On Mon, Oct 08, 2007 at 12:32:19AM -0700, Sanjay wrote:
I am using pytz.common_timezones to populate the timezone combo box of
some user registration form. But as it has so many timezones (around
400), it is a bit confusing to the users. Is there a smaller and more
practical set? If not, some suggestions on how to handle the
registration form effectively would help me a lot.
Use something like:

for zone in common_timezones:
continent, region = zone.split('/')

Then have two list boxes, one for the continent and the other for the region.

[Australia ]

[Melbourne ]

('Continent' is probably not the right word.)

Regards
Andrew




def view_image(request, key):
  data = memcache.get(key)
  if data is not None:
    if(request.META.get('HTTP_IF_MODIFIED_SINCE') >= data['Last-Modified']):
      data.status_code = 304
    return data
  else:
    image_content_blob = #some code to get the image from the data store
    current_time = datetime.utcnow()
    response = HttpResponse()
    last_modified = current_time - timedelta(days=1)
    response['Content-Type'] = 'image/jpg'
    response['Last-Modified'] = last_modified.strftime('%a, %d %b %Y %H:%M:%S GMT')
    response['Expires'] = current_time + timedelta(days=30)
    response['Cache-Control']  = 'public, max-age=315360000'
    response['Date']           = current_time
    response.content = image_content_blob

    memcache.add(image_key, response, 86400)
    return response